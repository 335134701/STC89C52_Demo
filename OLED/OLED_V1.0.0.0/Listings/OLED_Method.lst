C51 COMPILER V9.59.0.0   OLED_METHOD                                                       02/18/2020 22:45:10 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE OLED_METHOD
OBJECT MODULE PLACED IN .\Objects\OLED_Method.obj
COMPILER INVOKED BY: D:\Keil5\C51\C51\BIN\C51.EXE OLED_Method.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\Listings\OLED_Method.lst) OBJECT(.\Objects\OLED_Method.obj)

line level    source

   1          #include "Headers.h"
   2          
   3          
   4          /************************************************************************************
   5          *
   6          * 1. void delay(unsigned int z) -- ÑÓÊ±º¯Êý,ºÁÃë
   7          * 2. void IIC_Start() -- ¿ªÆôI2C×ÜÏß
   8          * 3. void IIC_Stop() -- ¹Ø±ÕI2C×ÜÏß
   9          * 4. void Write_IIC_Byte(unsigned char IIC_Byte) -- Í¨¹ýI2C×ÜÏßÐ´Ò»¸öbyteµÄÊý¾Ý
  10          * 5. void OLED_WrDat(unsigned char dat) -- ÏòOLEDÆÁÐ´Êý¾Ý
  11          * 6. void OLED_WrCmd(unsigned char cmd) -- ÏòOLEDÆÁÐ´ÃüÁî
  12          * 7. void OLED_Set_Pos(unsigned char x, unsigned char y) -- ÉèÖÃÏÔÊ¾×ø±ê
  13          * 8. void OLED_Fill(unsigned char bmp_dat) -- È«ÆÁÏÔÊ¾(ÏÔÊ¾BMPÍ¼Æ¬Ê±²Å»áÓÃµ½´Ë¹¦ÄÜ)
  14          * 9. void OLED_CLS(void) -- ¸´Î»/ÇåÆÁ
  15          * 10. void OLED_Init(void) -- OLEDÆÁ³õÊ¼»¯³ÌÐò£¬´Ëº¯ÊýÓ¦ÔÚ²Ù×÷ÆÁÄ»Ö®Ç°×îÏÈµ÷ÓÃ
  16          * 11. void OLED_P6x8Str(unsigned char x, y,unsigned char ch[]) -- 6x8µãÕû£¬ÓÃÓÚÏÔÊ¾ASCIIÂëµÄ×îÐ¡ÕóÁÐ£¬²»Ì«
             -ÇåÎú
  17          * 12. void OLED_P8x16Str(unsigned char x, y,unsigned char ch[]) -- 8x16µãÕû£¬ÓÃÓÚÏÔÊ¾ASCIIÂë£¬·Ç³£ÇåÎú
  18          * 13.void OLED_P16x16Ch(unsigned char x, y, N) -- 16x16µãÕû£¬ÓÃÓÚÏÔÊ¾ºº×ÖµÄ×îÐ¡ÕóÁÐ£¬¿ÉÉèÖÃ¸÷ÖÖ×ÖÌå¡¢¼Ó´Ö¡
             -¢ÇãÐ±¡¢ÏÂ»®ÏßµÈ
  19          * 14.void Draw_BMP(unsigned char x0, y0,x1, y1,unsigned char BMP[]) -- ½«128x64ÏñËØµÄBMPÎ»Í¼ÔÚÈ¡×ÖÈí¼þÖÐËã
             -³ö×Ö±í£¬È»ºó¸´ÖÆµ½codetabÖÐ£¬´Ëº¯Êýµ÷ÓÃ¼´¿É
  20          *
  21          *************************************************************************************/
  22          
  23          /*********************OLEDÇý¶¯³ÌÐòÓÃµÄÑÓÊ±³ÌÐò************************************/
  24          void delay(unsigned int z)
  25          {
  26   1              unsigned int x,y;
  27   1              for(x=z;x>0;x--)
  28   1                      for(y=110;y>0;y--);
  29   1      }
  30          
  31          /**********************************************
  32          //IIC Start
  33          **********************************************/
  34          void IIC_Start()
  35          {
  36   1         SCL = Hight_Voltage;         
  37   1         SDA = Hight_Voltage;
  38   1         SDA = Low_Voltage;
  39   1         SCL = Low_Voltage;
  40   1      }
  41          
  42          /**********************************************
  43          //IIC Stop
  44          **********************************************/
  45          void IIC_Stop()
  46          {
  47   1         SCL = Low_Voltage;
  48   1         SDA = Low_Voltage;
  49   1         SCL = Hight_Voltage;
  50   1         SDA = Hight_Voltage;
  51   1      }
C51 COMPILER V9.59.0.0   OLED_METHOD                                                       02/18/2020 22:45:10 PAGE 2   

  52          
  53          /**********************************************
  54          // Í¨¹ýI2C×ÜÏßÐ´Ò»¸ö×Ö½Ú
  55          **********************************************/
  56          void Write_IIC_Byte(unsigned char IIC_Byte)
  57          {
  58   1              unsigned char i;
  59   1              for(i=0;i<8;i++)
  60   1              {
  61   2                      if(IIC_Byte & 0x80)
  62   2                              SDA=Hight_Voltage;
  63   2                      else
  64   2                              SDA=Low_Voltage;
  65   2                      SCL=Hight_Voltage;
  66   2                      SCL=Low_Voltage;
  67   2                      IIC_Byte<<=1;
  68   2              }
  69   1              SDA=1;
  70   1              SCL=1;
  71   1              SCL=0;
  72   1      }
  73          
  74          /*********************OLEDÐ´Êý¾Ý************************************/ 
  75          void OLED_WrDat(unsigned char IIC_Data)
  76          {
  77   1              IIC_Start();
  78   1              Write_IIC_Byte(0x78);
  79   1              Write_IIC_Byte(0x40);                   //write data
  80   1              Write_IIC_Byte(IIC_Data);
  81   1              IIC_Stop();
  82   1      }
  83          /*********************OLEDÐ´ÃüÁî************************************/
  84          void OLED_WrCmd(unsigned char IIC_Command)
  85          {
  86   1              IIC_Start();
  87   1              Write_IIC_Byte(0x78);            //Slave address,SA0=0
  88   1              Write_IIC_Byte(0x00);                   //write command
  89   1              Write_IIC_Byte(IIC_Command);
  90   1              IIC_Stop();
  91   1      }
  92          /*********************OLED ÉèÖÃ×ø±ê************************************/
  93          void OLED_Set_Pos(unsigned char x, unsigned char y) 
  94          { 
  95   1              OLED_WrCmd(0xb0+y);
  96   1              OLED_WrCmd(((x&0xf0)>>4)|0x10);
  97   1              OLED_WrCmd((x&0x0f)|0x01);
  98   1      } 
  99          /*********************OLEDÈ«ÆÁ************************************/
 100          void OLED_Fill(unsigned char bmp_dat) 
 101          {
 102   1              unsigned char y,x;
 103   1              for(y=0;y<8;y++)
 104   1              {
 105   2                      OLED_WrCmd(0xb0+y);
 106   2                      OLED_WrCmd(0x01);
 107   2                      OLED_WrCmd(0x10);
 108   2                      for(x=0;x<X_WIDTH;x++)
 109   2                      OLED_WrDat(bmp_dat);
 110   2              }
 111   1      }
 112          /*********************OLED¸´Î»************************************/
 113          void OLED_CLS(void)
C51 COMPILER V9.59.0.0   OLED_METHOD                                                       02/18/2020 22:45:10 PAGE 3   

 114          {
 115   1              unsigned char y,x;
 116   1              for(y=0;y<8;y++)
 117   1              {
 118   2                      OLED_WrCmd(0xb0+y);
 119   2                      OLED_WrCmd(0x01);
 120   2                      OLED_WrCmd(0x10);
 121   2                      for(x=0;x<X_WIDTH;x++)
 122   2                      OLED_WrDat(0);
 123   2              }
 124   1      }
 125          /*********************OLED³õÊ¼»¯************************************/
 126          void OLED_Init(void)
 127          {
 128   1              delay(500);//³õÊ¼»¯Ö®Ç°µÄÑÓÊ±ºÜÖØÒª£¡
 129   1              OLED_WrCmd(0xae);//--turn off oled panel
 130   1              OLED_WrCmd(0x00);//---set Low_Voltage column address
 131   1              OLED_WrCmd(0x10);//---set Hight_Voltage column address
 132   1              OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 133   1              OLED_WrCmd(0x81);//--set contrast control register
 134   1              OLED_WrCmd(Brightness); // Set SEG Output Current Brightness
 135   1              OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0×óÓÒ·´ÖÃ 0xa1Õý³£
 136   1              OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0ÉÏÏÂ·´ÖÃ 0xc8Õý³£
 137   1              OLED_WrCmd(0xa6);//--set normal display
 138   1              OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
 139   1              OLED_WrCmd(0x3f);//--1/64 duty
 140   1              OLED_WrCmd(0xd3);//-set display offset  Shift Mapping RAM Counter (0x00~0x3F)
 141   1              OLED_WrCmd(0x00);//-not offset
 142   1              OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
 143   1              OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 144   1              OLED_WrCmd(0xd9);//--set pre-charge period
 145   1              OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 146   1              OLED_WrCmd(0xda);//--set com pins hardware configuration
 147   1              OLED_WrCmd(0x12);
 148   1              OLED_WrCmd(0xdb);//--set vcomh
 149   1              OLED_WrCmd(0x40);//Set VCOM Deselect Level
 150   1              OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
 151   1              OLED_WrCmd(0x02);//
 152   1              OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
 153   1              OLED_WrCmd(0x14);//--set(0x10) disable
 154   1              OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
 155   1              OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
 156   1              OLED_WrCmd(0xaf);//--turn on oled panel
 157   1              OLED_Fill(0x00); //³õÊ¼ÇåÆÁ
 158   1              OLED_Set_Pos(0,0);
 159   1      } 
 160          
 161          /***************¹¦ÄÜÃèÊö£ºÏÔÊ¾6*8Ò»×é±ê×¼ASCII×Ö·û´®    ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7****************/
 162          //×¢Òâ£ºÈç¹ûCodeÖÐµÄ×Ö·ûÓëASCII²»Ò»ÖÂ£¬Ôò»á³öÏÖ´íÎóÏÔÊ¾
 163          void OLED_P6x8Str(unsigned char x, y,unsigned char ch[])
 164          {
 165   1              unsigned char c=0,i=0,j=0;
 166   1              while (ch[j]!='\0')
 167   1              {
 168   2                      c =ch[j]-32;
 169   2                      if(x>126){x=0;y++;}
 170   2                      OLED_Set_Pos(x,y);
 171   2                      for(i=0;i<6;i++)
 172   2                      OLED_WrDat(F6x8[c][i]);
 173   2                      x+=6;
 174   2                      j++;
 175   2              }
C51 COMPILER V9.59.0.0   OLED_METHOD                                                       02/18/2020 22:45:10 PAGE 4   

 176   1      }
 177          
 178          /*******************¹¦ÄÜÃèÊö£ºÏÔÊ¾8*16Ò»×é±ê×¼ASCII×Ö·û´®        ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬ch[]ÎªÐèÒªÊä³öµÄ×Ö·û´®******
             -**********/
 179          //×¢Òâ£ºÈç¹ûCodeÖÐµÄ×Ö·ûÓëASCII²»Ò»ÖÂ£¬Ôò»á³öÏÖ´íÎóÏÔÊ¾
 180          void OLED_P8x16Str(unsigned char x, y,unsigned char ch[])
 181          {
 182   1              unsigned char c=0,i=0,j=0;
 183   1              while (ch[j]!='\0')
 184   1              {
 185   2                      c =ch[j]-32;
 186   2                      if(x>120){x=0;y++;}
 187   2                      OLED_Set_Pos(x,y);
 188   2                      for(i=0;i<8;i++)
 189   2                      OLED_WrDat(F8X16[c*16+i]);
 190   2                      OLED_Set_Pos(x,y+1);
 191   2                      for(i=0;i<8;i++)
 192   2                      OLED_WrDat(F8X16[c*16+i+8]);
 193   2                      x+=8;
 194   2                      j++;
 195   2              }
 196   1      }
 197          /*****************¹¦ÄÜÃèÊö£ºÏÔÊ¾16*16µãÕó  ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬N(ÁÐ)ÎªÒ³·¶Î§0¡«7***************************
             -*/
 198          void OLED_P16x16Ch(unsigned char x, y, N)
 199          {
 200   1              unsigned char wm=0;
 201   1              unsigned int adder=32*N;
 202   1              OLED_Set_Pos(x , y);
 203   1              for(wm = 0;wm < 16;wm++)
 204   1              {
 205   2                      OLED_WrDat(F16x16[adder]);
 206   2                      adder += 1;
 207   2              }
 208   1              OLED_Set_Pos(x,y + 1);
 209   1              for(wm = 0;wm < 16;wm++)
 210   1              {
 211   2                      OLED_WrDat(F16x16[adder]);
 212   2                      adder += 1;
 213   2              }               
 214   1      }
 215          /***********¹¦ÄÜÃèÊö£ºÏÔÊ¾ÏÔÊ¾BMPÍ¼Æ¬128¡Á64ÆðÊ¼µã×ø±ê(x,y),xµÄ·¶Î§0¡«128£¬yÎªÒ³µÄ·¶Î§0¡«7****************
             -*/
 216          //x_size±íÊ¾ÏÔÊ¾µÄ³¤¶È£¬·¶Î§Îª£º0~128£»y_size±íÊ¾ÏÔÊ¾µÄ¿í¶È£¬·¶Î§Îª£º0~8
 217          void Draw_BMP(unsigned char x0, y0,x_size, y_size,unsigned char BMP[])
 218          {
 219   1              unsigned int j=0;
 220   1              unsigned char x,y;
 221   1              if(y_size%8==0) y=y_size/8;      
 222   1              else y=y_size/8+1;
 223   1              for(y=y0;y<y_size;y++)
 224   1              {
 225   2                      OLED_Set_Pos(x0,y);
 226   2          for(x=x0;x<x_size;x++)
 227   2                  {      
 228   3                      OLED_WrDat(BMP[j++]);
 229   3                  }
 230   2              }
 231   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.59.0.0   OLED_METHOD                                                       02/18/2020 22:45:10 PAGE 5   

   CODE SIZE        =   1088    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
